generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dictionary {
  id          String             @id @default(cuid())
  slug        String             @unique
  name        String
  description String?
  isActive    Boolean            @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  options     DictionaryOption[]

  @@map("dictionaries")
}

model DictionaryOption {
  id           String     @id @default(cuid())
  dictionaryId String
  name         String
  slug         String
  description  String?
  sortOrder    Int        @default(0)
  isActive     Boolean    @default(true)
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  dictionary   Dictionary @relation(fields: [dictionaryId], references: [id])

  @@unique([dictionaryId, slug])
  @@map("dictionary_options")
}

model InstitutionSettings {
  id                      String   @id @default(cuid())
  institutionName         String   @default("Indian Learning Institute")
  institutionLogo         String?
  institutionWebsite      String?
  contactEmail            String   @default("admin@indianlearning.com")
  contactPhone            String?
  address                 String?
  registrationNumber      String?
  primaryCurrency         String   @default("INR")
  country                 String   @default("IN")
  defaultTimezone         String   @default("Asia/Kolkata")
  dateFormat              String   @default("DD/MM/YYYY")
  numberFormat            String   @default("IN")
  language                String   @default("en")
  academicYearStructure   String   @default("APRIL_TO_MARCH")
  gradingSystem           String   @default("PERCENTAGE")
  ageGroups               String[] @default(["5-10", "11-15", "16-20", "21-25", "26+"])
  qualificationLevels     String[] @default(["PRIMARY", "SECONDARY", "HIGHER_SECONDARY", "GRADUATE", "POST_GRADUATE"])
  paymentMethods          String[] @default(["CARD", "BANK_TRANSFER", "UPI"])
  taxRate                 Float    @default(18.0)
  taxInclusive            Boolean  @default(true)
  refundPolicyDays        Int      @default(7)
  minimumCoursePrice      Float    @default(100.0)
  maximumCoursePrice      Float    @default(50000.0)
  defaultSessionDuration  Int      @default(60)
  maxGroupSize            Int      @default(10)
  minGroupSize           Int      @default(1)
  bookingLeadTimeHours    Int      @default(24)
  cancellationNoticeHours Int     @default(2)
  emailFromName           String   @default("Indian Learning Institute")
  emailFromAddress        String   @default("noreply@indianlearning.com")
  brandPrimaryColor       String   @default("#3B82F6")
  brandSecondaryColor     String   @default("#1E40AF")
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  @@map("institution_settings")
}

model User {
  id                String      @id @default(cuid())
  name              String
  email             String      @unique
  password          String?
  avatar            String?
  phone             String?
  dateOfBirth       DateTime?
  gender            String?
  address           String?
  city              String?
  state             String?
  country           String?
  pincode           String?
  role              UserRole    @default(STUDENT)
  status            UserStatus  @default(ACTIVE)
  emailVerified     Boolean     @default(false)
  lastLoginAt       DateTime?
  preferences       Json?
  metadata          Json?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  enrollments       Enrollment[]
  courseTutors      CourseTutor[]
  sessions          ClassSession[]
  attendanceRecords AttendanceRecord[]
  assignmentSubmissions AssignmentSubmission[] @relation("StudentSubmissions")
  emailOtps         EmailOtp[]
  onboardingNonces  OnboardingNonce[]

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]

  @@map("categories")
}

model Curriculum {
  id          String    @id @default(cuid())
  name        String
  type        String?
  level       String?
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]

  @@map("curricula")
}

model CourseFormat {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]

  @@map("course_formats")
}

model CourseType {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]

  @@map("course_types")
}

model Course {
  id                String    @id @default(cuid())
  title             String
  slug              String    @unique
  shortDescription  String?
  longDescription   String?
  curriculumId      String?
  categoryId        String?
  courseTypeId      String?
  courseFormatId    String?
  oneToOnePrice     Decimal?
  oneToOneOffer     Decimal?
  oneToOneActive    Boolean   @default(true)
  groupPrice        Decimal?
  groupOffer        Decimal?
  groupActive       Boolean   @default(true)
  maxGroupSize      Int?
  minGroupSize      Int?
  sessionDuration   Int?
  sessionsPerWeek   Int?
  totalSessions     Int?
  minAge            Int?
  maxAge            Int?
  prerequisiteLevel String?
  primaryImage      String?
  secondaryImage    String?
  videoUrl          String?
  courseMaterials   String[]
  status            CourseStatus @default(DRAFT)
  isFeatured        Boolean   @default(false)
  tags              String[]
  difficulty        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  publishedAt       DateTime?

  // Relations
  category          Category? @relation(fields: [categoryId], references: [id])
  curriculum        Curriculum? @relation(fields: [curriculumId], references: [id])
  courseFormat      CourseFormat? @relation(fields: [courseFormatId], references: [id])
  courseType        CourseType? @relation(fields: [courseTypeId], references: [id])
  courseTutors      CourseTutor[]
  enrollments       Enrollment[]
  sessions          ClassSession[]
  assignments       Assignment[]
  syllabusPhases    CourseSyllabusPhase[]

  @@map("courses")
}

model CourseTutor {
  id                String    @id @default(cuid())
  courseId          String
  tutorId           String
  isPrimary         Boolean   @default(false)
  specialization    String?
  canTeachOneToOne  Boolean   @default(true)
  canTeachGroup     Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  course            Course    @relation(fields: [courseId], references: [id])
  tutor             User      @relation(fields: [tutorId], references: [id])

  @@unique([courseId, tutorId])
  @@map("course_tutors")
}

model Enrollment {
  id                String           @id @default(cuid())
  studentId         String
  courseId          String
  format            EnrollmentFormat
  sessionCount      Int?
  sessionDuration   Int?
  basePrice         Decimal?
  discountType      String?
  discountValue     Decimal?
  discountAmount    Decimal?
  subtotal          Decimal?
  taxRate           Decimal?
  taxAmount         Decimal?
  finalPrice        Decimal?
  offerPrice        Decimal?
  currency          String           @default("INR")
  paymentStatus     PaymentStatus   @default(PENDING)
  paymentMethod     PaymentMethod?
  paidAt           DateTime?
  preferredDays     String[]
  preferredTimes    String[]
  timezone          String?
  status            EnrollmentStatus @default(PENDING)
  progress          Int              @default(0)
  lastAccessedAt    DateTime?
  enrolledAt        DateTime         @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  expiresAt         DateTime?
  priceHistory      Json?
  lastPriceUpdate   DateTime?

  student           User             @relation(fields: [studentId], references: [id])
  course            Course          @relation(fields: [courseId], references: [id])
  sessions          ClassSession[]
  attendanceRecords AttendanceRecord[]
  assignmentSubmissions AssignmentSubmission[]

  @@map("enrollments")
}

model ClassSession {
  id          String       @id @default(cuid())
  courseId    String
  tutorId     String
  title       String
  description String?
  scheduledAt DateTime
  duration    Int          @default(60)
  type        SessionType @default(ONE_TO_ONE)
  status      SessionStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  course      Course             @relation(fields: [courseId], references: [id])
  tutor       User               @relation(fields: [tutorId], references: [id])
  enrollments Enrollment[]
  attendanceRecords AttendanceRecord[]

  @@map("class_sessions")
}

model AttendanceRecord {
  id          String           @id @default(cuid())
  studentId   String
  sessionId   String
  status      AttendanceStatus @default(PRESENT)
  checkInTime DateTime?
  checkOutTime DateTime?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  student     User         @relation(fields: [studentId], references: [id])
  session     ClassSession @relation(fields: [sessionId], references: [id])
  enrollment  Enrollment?  @relation(fields: [enrollmentId], references: [id])
  enrollmentId String?

  @@map("attendance_records")
}

model Assignment {
  id          String    @id @default(cuid())
  courseId    String
  title       String
  description String?
  dueDate     DateTime?
  maxPoints   Int       @default(100)
  instructions String?
  attachments String[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  course      Course                @relation(fields: [courseId], references: [id])
  submissions AssignmentSubmission[]

  @@map("assignments")
}

model AssignmentSubmission {
  id           String           @id @default(cuid())
  content      String?
  submissionType SubmissionType @default(TEXT)
  attachments  Json?
  status       SubmissionStatus @default(SUBMITTED)
  score        Float?
  feedback     String?
  isGraded     Boolean          @default(false)
  assignmentId String
  studentId    String
  enrollmentId String?
  submittedAt  DateTime         @default(now())
  gradedAt     DateTime?

  assignment   Assignment  @relation(fields: [assignmentId], references: [id])
  enrollment   Enrollment? @relation(fields: [enrollmentId], references: [id])
  student      User       @relation("StudentSubmissions", fields: [studentId], references: [id])

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

model CourseSyllabusPhase {
  id        String   @id @default(cuid())
  courseId  String
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  items     CourseSyllabusItem[]

  @@index([courseId, order])
  @@map("course_syllabus_phases")
}

model CourseSyllabusItem {
  id          String   @id @default(cuid())
  courseId    String
  phaseId     String
  title       String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course               @relation(fields: [courseId], references: [id], onDelete: Cascade)
  phase       CourseSyllabusPhase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  @@index([courseId, phaseId, order])
  @@map("course_syllabus_items")
}

model StudentSyllabusProgress {
  id                  String   @id @default(cuid())
  studentId           String
  phaseId             String
  completedByStudent  Boolean  @default(false)
  completedByTutor    Boolean  @default(false)
  completedAt         DateTime?
  tutorNotes          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  student             User                @relation(fields: [studentId], references: [id])
  phase               CourseSyllabusPhase @relation(fields: [phaseId], references: [id])

  @@unique([studentId, phaseId])
  @@map("student_syllabus_progress")
}

model EmailOtp {
  id        String   @id @default(cuid())
  userId    String
  email     String
  otp       String
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@map("email_otps")
}

model OtpSendLog {
  id        String   @id @default(cuid())
  email     String
  sentAt    DateTime @default(now())
  ipAddress String?
  userAgent String?

  @@map("otp_send_logs")
}

model OnboardingNonce {
  id        String   @id @default(cuid())
  userId    String
  nonce     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@map("onboarding_nonces")
}

// Enums
enum UserRole {
  ADMIN
  SUPER_ADMIN
  TUTOR
  STUDENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum CourseCategory {
  ONLINE_TUITION
  EXAM_PREPARATION
  ARTS_AND_MUSIC
  SPORTS_AND_FITNESS
  LANGUAGE_LEARNING
  PROFESSIONAL_DEVELOPMENT
}

enum CourseFormat {
  ONE_TO_ONE_ONLY
  GROUP_ONLY
  BOTH_FORMATS
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  SUSPENDED
}

enum EnrollmentFormat {
  ONE_TO_ONE
  GROUP
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  SUSPENDED
}

enum SessionType {
  ONE_TO_ONE
  GROUP
  WORKSHOP
  ASSESSMENT
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIAL
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  UPI
  WALLET
}

// New enums for assignment submissions
enum SubmissionType {
  TEXT
  GITHUB_URL
  LIVE_URL
  SCREENSHOTS
  SCREENRECORDINGS
  FILE_UPLOAD
  MULTIPLE_TYPES
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  LATE
  GRADED
  RETURNED
  RESUBMITTED
}
